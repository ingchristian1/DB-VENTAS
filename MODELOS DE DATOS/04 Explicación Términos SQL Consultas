1. JOIN
ðŸ‘‰ JOIN se utiliza para combinar filas de dos o mÃ¡s tablas basadas en una condiciÃ³n de coincidencia.

La coicidencia se basa generalmente en una clave primaria y una clave forÃ¡nea.
Existen varios tipos de JOIN:
INNER JOIN â†’ Devuelve solo las filas que tienen coincidencias en ambas tablas.
LEFT JOIN â†’ Devuelve todas las filas de la tabla de la izquierda y las coincidencias de la tabla de la derecha.
RIGHT JOIN â†’ Devuelve todas las filas de la tabla de la derecha y las coincidencias de la tabla de la izquierda.
FULL JOIN â†’ Devuelve todas las filas cuando hay una coincidencia en una de las tablas (no soportado en MySQL).
Ejemplo de JOIN:

SELECT c.Nombre, v.ValorTotal
FROM Cliente c
JOIN Venta v ON c.IdCliente = v.IdCliente;
âœ… Devuelve el nombre del cliente y el valor total de las ventas solo si hay coincidencia en ambas tablas.

2. GROUP BY
ðŸ‘‰ GROUP BY se usa para agrupar filas que tienen los mismos valores en columnas especÃ­ficas.
ðŸ‘‰ Se utiliza junto con funciones de agregaciÃ³n como SUM(), COUNT(), AVG(), MIN(), MAX().

Ejemplo de GROUP BY:
SELECT c.Nombre, COUNT(v.IdVenta) AS TotalVentas
FROM Cliente c
JOIN Venta v ON c.IdCliente = v.IdCliente
GROUP BY c.Nombre;
âœ… Agrupa las ventas por nombre de cliente y cuenta cuÃ¡ntas ventas ha realizado cada cliente.

3. ON
ðŸ‘‰ ON se usa para especificar la condiciÃ³n que une dos tablas en una consulta con JOIN.
ðŸ‘‰ Especifica cÃ³mo deben relacionarse las filas entre las tablas.

Ejemplo de ON:
SELECT c.Nombre, v.ValorTotal
FROM Cliente c
JOIN Venta v ON c.IdCliente = v.IdCliente;
âœ… ON indica que la relaciÃ³n se establece entre IdCliente en la tabla Cliente y IdCliente en la tabla Venta.

4. HAVING
ðŸ‘‰ HAVING se usa para filtrar los resultados despuÃ©s de una operaciÃ³n de agrupaciÃ³n (GROUP BY).
ðŸ‘‰ La diferencia entre WHERE y HAVING es que:

WHERE filtra filas antes de la agrupaciÃ³n.
HAVING filtra resultados despuÃ©s de la agrupaciÃ³n.

Ejemplo de HAVING:
SELECT c.Nombre, COUNT(v.IdVenta) AS TotalVentas
FROM Cliente c
JOIN Venta v ON c.IdCliente = v.IdCliente
GROUP BY c.Nombre
HAVING COUNT(v.IdVenta) > 1;
âœ… Filtra solo los clientes que tienen mÃ¡s de una venta despuÃ©s de la agrupaciÃ³n.

5. LEFT JOIN
ðŸ‘‰ LEFT JOIN devuelve todas las filas de la tabla de la izquierda y las coincidencias de la tabla de la derecha.
ðŸ‘‰ Si no hay coincidencia, devuelve NULL en las columnas de la tabla de la derecha.

Ejemplo de LEFT JOIN:
SELECT c.Nombre, v.ValorTotal
FROM Cliente c
LEFT JOIN Venta v ON c.IdCliente = v.IdCliente;
âœ… Muestra todos los clientes, incluso si no han realizado ninguna venta.
âœ… Si no hay coincidencia, el valor de ValorTotal serÃ¡ NULL.

6. ORDER BY
ðŸ‘‰ ORDER BY se usa para ordenar los resultados de una consulta.
ðŸ‘‰ Puedes ordenar los resultados de manera ascendente (ASC) o descendente (DESC).
ðŸ‘‰ Si no se especifica el orden, se asume ASC (ascendente) por defecto.

Ejemplo de ORDER BY:
SELECT c.Nombre, v.ValorTotal
FROM Cliente c
JOIN Venta v ON c.IdCliente = v.IdCliente
ORDER BY v.ValorTotal DESC;
âœ… Ordena los resultados por el valor total de las ventas de mayor a menor.

7. LIMIT
ðŸ‘‰ LIMIT limita el nÃºmero de filas que devuelve una consulta.
ðŸ‘‰ Es Ãºtil para mostrar solo las primeras N filas o para realizar paginaciÃ³n.

Ejemplo de LIMIT:
SELECT c.Nombre, v.ValorTotal
FROM Cliente c
JOIN Venta v ON c.IdCliente = v.IdCliente
ORDER BY v.ValorTotal DESC
LIMIT 1;
âœ… Muestra solo el cliente con la venta de mayor valor.
âœ… LIMIT 1 devuelve solo una fila.

8. DESC
ðŸ‘‰ DESC se usa para ordenar resultados en orden descendente.
ðŸ‘‰ Va acompaÃ±ado de ORDER BY.

Ejemplo de DESC:
SELECT c.Nombre, v.ValorTotal
FROM Cliente c
JOIN Venta v ON c.IdCliente = v.IdCliente
ORDER BY v.ValorTotal DESC;
âœ… Ordena los resultados desde el valor mÃ¡s alto al mÃ¡s bajo.

9. Subconsultas (Nested Queries)
ðŸ‘‰ Una subconsulta es una consulta dentro de otra consulta.
ðŸ‘‰ Las subconsultas pueden devolver valores que se usan en la consulta externa.
ðŸ‘‰ Se utilizan con operadores como IN, NOT IN, EXISTS, NOT EXISTS, =, etc.

Ejemplo de Subconsulta:
SELECT c.Nombre, c.Apellido, v.FechaVenta
FROM Cliente c
JOIN Venta v ON c.IdCliente = v.IdCliente
WHERE v.FechaVenta = (SELECT MAX(FechaVenta) FROM Venta);
âœ… La subconsulta (SELECT MAX(FechaVenta) FROM Venta) devuelve la fecha de la Ãºltima venta.
âœ… La consulta externa filtra el cliente que realizÃ³ la Ãºltima venta.

